name: Build and publish release

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'Docker/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  test-build:
    name: Run build tests
    uses: ./.github/workflows/TestBuildTask.yml
    secrets: inherit

  get-version:
    name: Get version information
    uses: ./.github/workflows/GetVersionTask.yml
    secrets: inherit

  build-matrix:
    name: Build matrix
    runs-on: ubuntu-latest
    needs: [test-build, get-version]
    strategy:
        matrix:
          include:
          - runtime: win-x64
          - runtime: linux-x64
          - runtime: linux-musl-x64
          - runtime: linux-arm
          - runtime: linux-arm64
          - runtime: osx-x64
          - runtime: osx-arm64

    steps:

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.x"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build project
        run: >-
            dotnet publish ./PlexCleaner/PlexCleaner.csproj
            --runtime ${{ matrix.runtime }}
            --self-contained false
            --output ${{ runner.temp }}/publish/${{ matrix.runtime }}
            --configuration ${{ endsWith(github.ref, 'refs/heads/main') && 'Release' || 'Debug' }}
            -property:Version=${{ needs.get-version.outputs.AssemblyVersion }}
            -property:FileVersion=${{ needs.get-version.outputs.AssemblyFileVersion }}
            -property:AssemblyVersion=${{ needs.get-version.outputs.AssemblyVersion }}
            -property:InformationalVersion=${{ needs.get-version.outputs.AssemblyInformationalVersion }}
            -property:PackageVersion=${{ needs.get-version.outputs.SemVer2 }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: publish-${{ matrix.runtime }}
          path: ${{ runner.temp }}/publish

  github-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [ build-matrix, get-version ]

    steps:

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: publish-*
        merge-multiple: true
        path: ${{ runner.temp }}/publish

    - name: Zip build output
      run: 7z a -t7z ${{ runner.temp }}/publish/PlexCleaner.7z ${{ runner.temp }}/publish/*

    - name: Create GitHub release
      uses: softprops/action-gh-release@v2
      with:
        generate_release_notes: true
        tag_name: ${{ needs.get-version.outputs.SemVer2 }}
        prerelease: ${{ !endsWith(github.ref, 'refs/heads/main') }}
        files: ${{ runner.temp }}/publish/PlexCleaner.7z
